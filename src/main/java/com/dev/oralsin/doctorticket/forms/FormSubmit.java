/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.dev.oralsin.doctorticket.forms;

import com.dev.oralsin.doctorticket.models.Alteracao;
import com.dev.oralsin.doctorticket.models.AutDiretor;
import com.dev.oralsin.doctorticket.models.Cancelamento;
import com.dev.oralsin.doctorticket.models.DadosFranqueado;
import com.dev.oralsin.doctorticket.models.Email;
import com.dev.oralsin.doctorticket.models.ReversaoAlteracao;
import com.dev.oralsin.doctorticket.models.ReversaoFinalizado;
import com.dev.oralsin.doctorticket.models.TransferenciaPaciente;
import java.time.Duration;
import java.util.Set;
import static org.apache.commons.lang3.ObjectUtils.wait;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 *
 * @author samueelg
 */
public class FormSubmit extends javax.swing.JFrame {
    /**
     * Creates new form FormSubmit
     * @param dados
     */
    public FormSubmit(DadosFranqueado dados) {
        initComponents();
        
        System.setProperty("webdriver.chrome.driver", "src\\main\\java\\com\\dev\\oralsin\\doctorticket\\driver\\chromedriver.exe");
       
                
        if (dados instanceof TransferenciaPaciente transferenciaPaciente) {
            jTextArea1.setText(transferenciaPaciente.getMsg());
        }
        
        switch(dados){
            case TransferenciaPaciente tp -> {
        // Lógica para TransferenciaPaciente
        jTextArea1.setText(((TransferenciaPaciente) dados).getMsg());
    }
            case ReversaoFinalizado rev ->{
        jTextArea1.setText(((ReversaoFinalizado) dados).getMsg());
            }
            case ReversaoAlteracao revAlt ->{
        jTextArea1.setText(((ReversaoAlteracao) dados).getMsg());
            }
            case Cancelamento cancelamento ->{
        jTextArea1.setText(((Cancelamento) dados).getMsg());
            }
            case Email email->{
        jTextArea1.setText(((Email) dados).getMsg());
            }
            case AutDiretor aut ->{
        jTextArea1.setText(((AutDiretor) dados).getMsg());
            }
            case Alteracao alt ->{
        jTextArea1.setText(((Alteracao) dados).getMsg());
            }
            default ->{
                System.out.println("Não");
            }
        }
    }

    private FormSubmit() {
        throw new UnsupportedOperationException("Not supported yet.");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        title = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        enviar = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        title.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        title.setText("DoctorTicket");

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        enviar.setText("Enviar");
        enviar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enviarActionPerformed(evt);
            }
        });

        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(214, 214, 214)
                            .addComponent(title))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(41, 41, 41)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(title)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 25, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enviar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        FormMain form = new FormMain();
        this.dispose();
        form.setVisible(true);
        form.setLocationRelativeTo(null);
        form.setResizable(false);
    }//GEN-LAST:event_cancelarActionPerformed

    private void enviarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enviarActionPerformed
        ChromeOptions options = new ChromeOptions();
        options.setExperimentalOption("debuggerAddress", "127.0.0.1:9222");   
        WebDriver driver = new ChromeDriver(options);
        
        Set<String> guiasAbertas = driver.getWindowHandles();
        
        String movideskAba = null;
        
                // Percorre todas as abas para verificar se o Movidesk já está aberto
        for (String aba : guiasAbertas) {
            driver.switchTo().window(aba);
            if (driver.getCurrentUrl().contains("https://oralsinf.movidesk.com/Ticket/Edit/125339")) { 
                movideskAba = aba;
                break; // Para de procurar quando encontrar
            }
        }

        // Se encontrou uma aba do Movidesk, alterna para ela
        try{
        if (movideskAba != null) {
            driver.switchTo().window(movideskAba);
        } else {
            // Se não encontrou, abre uma nova aba e acessa o site
            driver.switchTo().newWindow(org.openqa.selenium.WindowType.TAB);
            driver.get("https://oralsinf.movidesk.com/Ticket/Edit/125339");
        }
            //Abre um novo ticket no movidesk
            //Actions actions = new Actions(driver);
            //actions.keyDown(Keys.ALT).sendKeys("t").keyUp(Keys.ALT).perform();
            
            WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(5));
            
            //Abre serviço
            
            WebElement seletorServico = wait.until(ExpectedConditions.elementToBeClickable(By.id("select2-chosen-31")));
            seletorServico.click();
            
            WebElement opcService = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[contains(@class, 'select2-result')]//div[contains(normalize-space(), 'Recepção')]")));
            opcService.click();
            
            WebElement seletorServicos = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//*[@id=\"ticket-sidebar\"]/div[2]/div[7]/div/a")));
            seletorServicos.click();
            
            WebElement seletorInput = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[18]/input")));
            seletorInput.click();
            seletorInput.sendKeys("Transferência", Keys.ENTER);
            
            WebElement opcServices = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[contains(@class, 'jqx-tree-item-li')]//div[contains(text(), 'Transferência de Paciente')]")));
            opcServices.click();
            
            WebElement seletorUrgencia = wait.until(ExpectedConditions.elementToBeClickable(By.id("select2-chosen-17")));
            seletorUrgencia.click();
            
            WebElement opcao = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("//li[contains(@class, 'select2-result') and .//div[contains(normalize-space(), 'Solicitação de serviço')]]")));
            opcao.click();     
            

        }catch(Exception e){
            e.printStackTrace();
        }
        
    }//GEN-LAST:event_enviarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormSubmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormSubmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormSubmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormSubmit.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormSubmit().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelar;
    private javax.swing.JButton enviar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
